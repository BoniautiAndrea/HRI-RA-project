import gymnasium as gym
import policy_translator

# Create lunar lander environment
env = gym.make('LunarLander-v2')
# Initialize it
observation, info = env.reset()

# Parse policy previously generated by PDDL domain/problem
policy = policy_translator.parse_policy_novel('novelocity/final_policy.out')
print('Policy rules: ')
for rule in policy.rules:
    print(rule)

# Action values in environment
actions = {
    'idle' : 0,
    'left' : 1,
    'main' : 2,
    'right' : 3,
    None : 0
}

# Starting point of simulation
print('First Observation:')
print(observation)
"""
# Complete scenario
state = policy_translator.discretize(observation[0], 
                                     observation[1], 
                                     observation[4], 
                                     observation[2], 
                                     observation[3], 
                                     observation[5])
x_discr, y_discr, t_discr, vx_discr, vy_discr, vt_discr = state

print('Starting observation discretized:')
print(x_discr, y_discr, t_discr, vx_discr, vy_discr, vt_discr)

for i in range(100):
    next_action = policy_translator.next_action(state, policy)
    print('Next action: ', next_action)
    observation, reward, terminated, truncated, info = env.step(actions[next_action])
    print('Resulting observation: ', observation)
    state = policy_translator.discretize(observation[0], 
                                     observation[1], 
                                     observation[4], 
                                     observation[2], 
                                     observation[3], 
                                     observation[5])
    print('Discretized observation: ', state)
"""
# Novelocity scenario
state = policy_translator.discretize(observation[0], observation[1], observation[4], novel=True)

for i in range(100):
    next_action = policy_translator.next_action_novel(state, policy)
    print('Next action: ', next_action)
    observation, reward, terminated, truncated, info = env.step(actions[next_action])
    print('Resulting observation: ', observation)
    state = policy_translator.discretize(observation[0], observation[1], observation[4], novel=True)
    print('Discretized observation: ', state)
